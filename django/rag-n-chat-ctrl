#!/bin/bash

# global environment
[[ -e global/.env ]] || {
    echo "Environment file not found: global/.env"
    exit 1
}
source global/.env

# use port from environment if specified
port=8001
[[ "x${API_SERVER_PORT}" == "x" ]] || {
    port=${API_SERVER_PORT}
}

# get command argument 1
command=${1}

# make sure we have a valid command
[[ " status stop start listeners " =~ " ${command} " ]] || {
    echo "USAGE:"
    echo "${0}"
    echo "    start      launch the server"
    echo "    stop       stop a running server"
    echo "    status     print the current process tree"
    echo "    listeners  find processes listening on ${port}"
    exit 1
}

# check for pid file
[[ -e ${0}.pid ]] && {
    pid=$(cat ${0}.pid)
    pidFound=true
} || {
    pidFound=false
}

# status and stop fail without a pid
[[ "${pidFound}" == "false" ]] && [[ " status stop " =~ " ${command} " ]] && {
    echo ${0} ${command}
    echo pid file not found: ${0}.pid
    exit 1
}

# start fails with a pid
[[ "$pidFound" == "true" ]] && [[ "${command}" == "start" ]] && {
    echo ${0} ${command}
    echo pid file found: ${0}.pid
    ${0} status
    exit 1
}

# get the process tree for the first live process
function proctree {
    for proc in ${@}
    do
        [[ -e /proc/${proc} ]] && {
            pstree -p ${proc}
            procFound=true
            break
        }
    done
    [[ "${procFound}" == "true" ]] && return 0
    echo "No live processes found."
    echo "Check for listeners on port ${port}."
    echo "${0} listeners"
}

# kill only processes that remain alive
function safekill {
    for proc in ${@}
    do
        [[ -e /proc/${proc} ]] && {
            echo "Killing ${proc}"
            kill -9 ${proc}
            procFound=true
        }
    done
    [[ "${procFound}" == "true" ]] && return 0
    echo "No live processes found."
}

# get the process tree for the first live process
function listeners {
    command -v lsof >/dev/null || {
        echo "Install lsof to find processes listening on port ${port}"
        exit 1
    }
    for proc in $(lsof -i :${port} | grep LISTEN | awk '{print $2}')
    do
       echo "${proc} LISTEN:${port} $(ps -p ${proc} -o command | tail -1)"
    done

}

# handle a valid command
case ${command} in
    status)
        echo rag-n-chat server processes
        proctree ${pid}
    ;;
    stop)
        echo "Stopping server."
        safekill ${pid}
        rm ${0}.pid
        echo "Server stopped."
    ;;
    start)
        nohup ./.venv/bin/python manage.py runserver ${port} > ${0}.log 2>&1 &
        echo "Logging at: ${0}.log"
        echo "Waiting for processes to launch."
        sleep 3
        pstree -p $! | head -1 | grep -o '[0-9][0-9]*' | head -2 | xargs echo > ${0}.pid
        echo logging to ${0}.log
        echo "Server started."

    ;;
    listeners)
        listeners
    ;;
esac
